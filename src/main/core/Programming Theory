
**************************************** JUNIOR LEVEL ******************************************

    //todo Занимались ли вы автоматизацией тестирования?

        //todo На каких языках?             Which programming languages do you know?

        //todo Какие фреймворки и библиотеки задействовали?            Which frameworks and libraries did you use?

        //todo пользовались ли вы GIT

            //todo каким клиентом пользуетесь или работаете через консоль?

            //todo какие команды необходимо выполнить перед тем как запушить код на репозиторий

            git add .
            git commit -m "init"
            git push

**************************************** MIDDLE LEVEL ******************************************

    //todo Что такое программа

        «предписание», то есть заданную последовательность действий


    //todo Назовите Основные принципы ООП

        абстракция, инкапсуляция, наследование, полиморфизм.


    //todo Знакомы ли Вам какие-либо паттерны проектирования в тестировании?

        POM


    //todo Что такое Java Reflection?

        механизм исследования данных о программе во время её выполнения

        Скажите пару слов про АОП (Аспектно Ориентированную Парадигму). Что вы знаете об этом?
            парадигма программирования, основанная на идее разделения функциональности для улучшения разбиения программы на модули.


    //todo Что такое система автоматической сборки, какими вы пользовались?


    //todo Расскажите про Gradle, в чем его приемущества

        Gradle — система автоматической сборки, построенная на принципах Apache Ant и Apache Maven,
        но предоставляющая DSL на языке Groovy (Kotlin) вместо традиционной XML-образной формы представления конфигурации проекта.


**************************************** ULTIMATE LEVEL ******************************************

    //todo Расскажите о принципе проектирования ПО - DRY

        Don’t repeat yourself, DRY (рус. не повторяйся) — это принцип разработки программного обеспечения,
        нацеленный на снижение повторения информации различного рода, особенно в системах со множеством слоёв абстрагирования.


    //todo Расскажите о принципе проектирования ПО - YAGNI ("You aren't gonna need it")

        YAGNI — процесс и принцип проектирования ПО,
        отказ от избыточной функциональности, в которой нет непосредственной надобности.


    //todo Слышали ли вы принцип проектирования ПО - KISS

        Принцип проектирования KISS (keep it simple and straightforward)
        простой код – наиболее понятный и надежный.


    //todo Что вы знаете про принципы SOLID

        S: Single Responsibility Principle (Принцип единственной ответственности).
            Каждый класс должен решать лишь одну задачу.

        O: Open-Closed Principle (Принцип открытости-закрытости).
            Программные сущности (классы, модули, функции) должны быть открыты для расширения, но не для модификации.
            (override, а не if else)

        L: Liskov Substitution Principle (Принцип подстановки Барбары Лисков).
            Необходимо, чтобы подклассы могли бы служить заменой для своих суперклассов

        I: Interface Segregation Principle (Принцип разделения интерфейса).
            Создавайте узкоспециализированные интерфейсы, предназначенные для конкретного клиента.
            Клиенты не должны зависеть от интерфейсов, которые они не используют.
            Этот принцип направлен на устранение недостатков, связанных с реализацией больших интерфейсов.

        D: Dependency Inversion Principle (Принцип инверсии зависимостей).
            Объектом зависимости должна быть абстракция, а не что-то конкретное
            Модули верхних уровней не должны зависеть от модулей нижних уровней.